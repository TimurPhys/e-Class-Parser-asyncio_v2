from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import orm_add_user_if_not_exists, orm_get_user
from data_parse.driver import create_driver

from handlers.filters import personalCodeValid, profileNumberCheck

from data_parse.parse import get_profiles, get_stats

import handlers.keyboards as kb

router = Router()

class Reg(StatesGroup):
    personal_code = State()
    password = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–µ–Ω —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω")

@router.message(Command('reg'))
async def auth(message: Message, state: FSMContext, session: AsyncSession):
    try:
        user_id = int(message.from_user.id)
        found_user = await orm_get_user(session, user_id)
        if found_user.user_id:
            print(f"–ü–æ–ª—É—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {found_user}")
            await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É –∑–∞–π—Ç–∏ –ø–æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º?", reply_markup=kb.choice, one_time_keyboard=True)
    except Exception as e:
        print(e)

@router.message(F.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
async def register(message: Message, state: FSMContext):
    await state.set_state(Reg.personal_code)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥', reply_markup=ReplyKeyboardRemove())

@router.message(Reg.personal_code)
async def reg_two(message: Message, state: FSMContext):
    if personalCodeValid(message.text):
        await state.update_data(code=message.text)
        await state.set_state(Reg.password)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å')
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n –ü—Ä–∏–º–µ—Ä: 123456-78910")

@router.message(Reg.password)
async def two_three(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(password=message.text)
    data = await state.get_data()

    try:
        user_id = int(message.from_user.id)
        await orm_add_user_if_not_exists(session, user_id, data)
        await message.answer(f'–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n'
                             f'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: {data["code"]}\n'
                             f'–ü–∞—Ä–æ–ª—å: <tg-spoiler>{data["password"]}</tg-spoiler>\n'
                             f'–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –≤–æ–π—Ç–∏?', reply_markup=kb.auth, parse_mode='HTML', one_time_keyboard=True)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: \n"
                             f"{str(e)}")

    await state.clear()

@router.message(F.text.in_(["–í–æ–π—Ç–∏", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]))
async def login(message: Message, state: FSMContext, session: AsyncSession):
    user_id = int(message.from_user.id)
    user = await orm_get_user(session, user_id)

    code = user.code
    password = user.password

    if code and password:
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å", reply_markup=ReplyKeyboardRemove())
        driver = create_driver()
        profiles = get_profiles(driver, code, password)

        response = "–£–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
        for profile in profiles:
            response += (f"–ü—Ä–æ—Ñ–∏–ª—å {profiles.index(profile)+1}\n"
                        f"üë§ –ò–º—è: {profile['firstName']} {profile['lastName']}\n"
                        f"üè´ –®–∫–æ–ª–∞: {profile['schoolName']}\n"
                        f"üìö –ö–ª–∞—Å—Å: {profile['className']}\n"
                        f"üé≠ –†–æ–ª—å: {profile['personTypeName']}\n\n")

        await message.answer(response, reply_markup=await kb.profiles(profiles))
        await state.update_data(profiles=profiles)
        await state.update_data(driver=driver)

@router.message(F.text.contains("–ü—Ä–æ—Ñ–∏–ª—å"))
async def profile_fetch(message: Message, state: FSMContext):
    data = await state.get_data()
    profiles = data["profiles"]
    if profileNumberCheck(message.text, len(profiles)):
        profile_number = int(message.text.split(' ')[1])
        driver = data['driver']
        await message.answer(f"–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {profile_number}-–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")

        try:
            text = get_stats(driver, profiles[profile_number-1], 1)
            await message.answer(text)
        except Exception as e:
            await message.answer(str(e))
        finally:
            driver.close()
            driver.quit()
            await state.clear()

